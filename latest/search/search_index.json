{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Vivified","text":"<p>Welcome to the Vivified platform documentation. This site covers the core platform, plugins, and developer workflows.</p> <ul> <li>Core: The orchestrator and gateway that mediate all plugin interactions.</li> <li>Plugins: Isolated services implementing domain features and integrations.</li> <li>SDKs: Language helpers for building plugins against the Vivified contracts.</li> </ul> <p>Use the sidebar to navigate topics.</p>"},{"location":"#pipeline-test-sun-sep-28-193021-mdt-2025","title":"Pipeline Test Sun Sep 28 19:30:21 MDT 2025","text":"<p>This tests the mkdocs \u2192 gh-pages deployment pipeline.</p>"},{"location":"#rebuild-trigger-sun-sep-28-195755-mdt-2025","title":"Rebuild Trigger Sun Sep 28 19:57:55 MDT 2025","text":"<p>This change triggers a rebuild to include missing pages.</p>"},{"location":"contributing/","title":"Contributing","text":"<p>Development workflow</p> <ul> <li>Create a feature branch off <code>development</code></li> <li>Follow conventional commits (e.g., <code>feat(core): add X</code>)</li> <li>Add/Update tests and docs with any code changes</li> <li>Open a PR and ensure CI passes</li> </ul> <p>Documentation</p> <ul> <li>Docs live under <code>docs/</code> and are built with MkDocs</li> <li>Versioning is managed with <code>mike</code> (alias <code>latest</code> tracks the dev docs)</li> <li>CI validates docs with <code>mkdocs build --strict</code></li> </ul> <p>Make targets</p> <ul> <li><code>make docs</code> \u2014 Build docs site locally</li> <li><code>make docs-serve</code> \u2014 Serve docs locally at http://127.0.0.1:8000</li> </ul>"},{"location":"getting-started/","title":"Getting Started","text":"<p>This guide helps you run the Phase 1 scaffold locally.</p> <p>Prerequisites</p> <ul> <li>Docker and Docker Compose</li> <li>Python 3.11+ (for local testing)</li> </ul> <p>Quick start</p> <ol> <li>Build and start: <code>make up</code></li> <li>Check core health: <code>curl http://localhost:8000/health</code></li> <li>Verify plugin registration: <code>curl http://localhost:8000/plugins</code></li> </ol> <p>Development commands</p> <ul> <li><code>make test</code> \u2014 Runs unit tests</li> <li><code>make lint</code> \u2014 Runs linters</li> <li><code>make proto</code> \u2014 Compiles protobufs</li> <li><code>make down</code> \u2014 Stops services</li> </ul> <p>Next steps</p> <ul> <li>Read Core Overview to see how plugin registration works in Phase 1.</li> </ul>"},{"location":"ai/overview/","title":"Vivified AI Studio \u2014 Internal RAG + Agent","text":"<p>This document describes the internal AI features wired into the Admin Console. It is intended for internal development. Customer docs will be carved later.</p>"},{"location":"ai/overview/#whats-included","title":"What\u2019s included","text":"<ul> <li>RAG Service (Redis-backed, memory fallback) that indexes local <code>docs/</code> and <code>internal-plans/</code>.</li> <li>Admin API endpoints under <code>/admin/ai/*</code> to train, query, and run a stub agent.</li> <li>Admin UI panel \u201cAI Studio\u201d under Tools.</li> <li>Optional auto-train on startup with <code>AI_AUTO_TRAIN=true</code>.</li> </ul> <p>No external LLM calls are required for basic operation. All data stays local.</p>"},{"location":"ai/overview/#admin-api","title":"Admin API","text":"<ul> <li><code>GET /admin/ai/status</code> \u2014 returns <code>{ docs_indexed, last_trained_ts }</code> (admin trait)</li> <li><code>POST /admin/ai/train</code> \u2014 body <code>{ sources?: string[] }</code>, returns <code>{ ok, indexed, total }</code> (admin trait)</li> <li><code>POST /admin/ai/query</code> \u2014 body <code>{ q: string }</code>, returns top hits (admin/viewer)</li> <li><code>POST /admin/ai/agent/run</code> \u2014 body <code>{ prompt: string }</code>, returns <code>{ result }</code> (admin)</li> </ul> <p>All calls are audited through FastAPI logging; no PHI is logged.</p>"},{"location":"ai/overview/#admin-ui","title":"Admin UI","text":"<ul> <li>Tools \u2192 AI Studio: train RAG and run queries from the console.</li> <li>Uses your current API key. DEV_MODE supports <code>bootstrap_admin_only</code> for quick testing.</li> </ul>"},{"location":"ai/overview/#redis","title":"Redis","text":"<p>If <code>REDIS_URL</code> is set, the RAG service uses Redis structures:</p> <ul> <li><code>ai:rag:docs</code> \u2014 set of doc IDs</li> <li><code>ai:rag:doc:{id}:title</code>, <code>:path</code>, <code>:content</code></li> <li><code>ai:rag:token:{token}</code> \u2014 set of doc IDs for inverted index</li> </ul> <p>If Redis is unavailable, an in-memory index is used.</p>"},{"location":"ai/overview/#auto-train","title":"Auto-train","text":"<p>Set <code>AI_AUTO_TRAIN=true</code> in the environment to index the entire repository (<code>.</code>) at startup. Indexing respects <code>.ragignore</code> (first) and <code>.gitignore</code> (second).</p>"},{"location":"ai/overview/#tbac-trait-based-access-control","title":"TBAC (Trait-Based Access Control)","text":"<p>The RAG index and queries honor user traits. Each indexed document carries metadata with <code>required_traits</code> (defaults to empty) and <code>classification</code> (defaults to <code>internal</code>). At query time, only documents whose <code>required_traits</code> are a subset of the user\u2019s traits are considered.</p> <p>This allows HIPAA-safe usage patterns where the assistant can answer aggregate questions without ever seeing PII fields. For example, you could index randomized patient IDs and diagnosis/outcome fields behind a trait like <code>analytics_viewer</code>, while excluding any PII traits entirely. The assistant\u2019s visibility is governed by the same trait system as users.</p> <p>The current codebase indexing defaults to <code>required_traits=[]</code>. Data sources that include sensitive fields should be indexed with appropriate <code>required_traits</code> (future enhancement wires this via ingestion policies/config).</p>"},{"location":"ai/overview/#mcp-http-tool-preview","title":"MCP HTTP Tool (preview)","text":"<ul> <li><code>POST /mcp/http/tools/rag/query</code> \u2014 body <code>{ q: string }</code> returns <code>{ items }</code>, gated by user traits (admin or viewer).</li> <li>Health endpoints: <code>/mcp/sse/health</code>, <code>/mcp/http/health</code>.</li> </ul>"},{"location":"ai/overview/#cli-helper","title":"CLI helper","text":"<p><code>tools/scripts/rag_train.py</code> calls the API to trigger training.</p> <p>Example:</p> <pre><code>AI_API_URL=http://localhost:8000 API_KEY=bootstrap_admin_only \\\n  python tools/scripts/rag_train.py --sources docs internal-plans\n</code></pre>"},{"location":"ai/overview/#next-steps-internal-roadmap","title":"Next steps (internal roadmap)","text":"<ul> <li>Wire optional LangGraph pipeline and tool calling (feature flag controlled).</li> <li>Add connector config for OpenAI/Anthropic via ConfigService and proxy allowlist.</li> <li>Expand Admin UI to visualize vector store stats and per-source toggles.</li> <li>MCP integration: expose RAG query as an MCP tool over SSE/HTTP transports.</li> </ul>"},{"location":"architecture/diagrams/","title":"Architecture Diagrams","text":"<p>System architecture diagrams and flow charts.</p>"},{"location":"architecture/diagrams/#coming-soon","title":"Coming Soon","text":"<p>Architecture documentation is being generated.</p>"},{"location":"core/overview/","title":"Core Overview","text":"<p>The Vivified Core is a FastAPI service that mediates all plugin interactions.</p> <p>Endpoints (Phase 1)</p> <ul> <li><code>GET /health</code> \u2014 Health check</li> <li><code>POST /plugins/register</code> \u2014 Register a plugin with a manifest</li> <li><code>GET /plugins</code> \u2014 List registered plugins</li> <li><code>POST /plugins/{plugin_id}/heartbeat</code> \u2014 Update plugin heartbeat</li> </ul> <p>Key modules</p> <ul> <li><code>core/main.py</code> \u2014 FastAPI app and REST endpoints</li> <li><code>core/plugin_manager/registry.py</code> \u2014 In-memory plugin registry with JWT issuance</li> <li><code>core/plugin_interface.py</code> \u2014 Base plugin contracts</li> <li><code>core/proto/canonical_models.proto</code> \u2014 Canonical data models (proto)</li> </ul> <p>Security and compliance</p> <ul> <li>Phase 1 keeps registration open; later phases add authN/Z checks</li> <li>Logging avoids PII/PHI and includes a trace id</li> </ul>"},{"location":"plugins/overview/","title":"Plugins Overview","text":"<p>Plugins are isolated services that implement features and integrations. In Phase 1, we ship a minimal <code>user_management</code> plugin to exercise the interface.</p> <p>User Management plugin</p> <ul> <li>Registers itself with core on startup</li> <li>Exposes <code>/health</code> and a placeholder <code>/api/users/{user_id}</code> endpoint</li> </ul> <p>Manifest fields (subset)</p> <ul> <li><code>id</code>, <code>name</code>, <code>version</code> \u2014 Basic identity</li> <li><code>contracts</code> \u2014 Capabilities implemented (e.g., <code>IdentityPlugin</code>)</li> <li><code>traits</code> \u2014 Security and behavior hints (e.g., <code>handles_pii</code>)</li> <li><code>security</code> and <code>compliance</code> \u2014 HIPAA-related metadata</li> </ul> <p>See <code>plugins/user_management/main.py</code> for a concrete example.</p>"},{"location":"plugins/overview/#next","title":"Next","text":"<ul> <li>Read the full Plugin System guide: Plugin System</li> </ul>"},{"location":"plugins/plugin-system/","title":"Vivified Plugin System","text":"<p>This guide explains how Vivified plugins work, how they communicate with core, the manifest contract and validation rules, lifecycle and health monitoring, and a concrete example (User Management / IdentityPlugin).</p> <p>Security first: All plugin interactions are authenticated, authorized, audited, and mediated by core. No plugin may bypass core.</p>"},{"location":"plugins/plugin-system/#what-are-plugins","title":"What Are Plugins?","text":"<p>Vivified plugins are modular, isolated services that add features or integrations to the platform. Each plugin runs as its own service (typically a container) and communicates with the core over defined interfaces (HTTP/REST or gRPC). Isolation means:</p> <ul> <li>Plugins can be written in any language/stack that speaks the contract.</li> <li>Faulty or malicious plugins are contained; core remains up.</li> <li>Core mediates all interactions to enforce policy, security, and compliance.</li> </ul> <p>Benefits:</p> <ul> <li>Extensibility: add features by adding a plugin, not changing core.</li> <li>Isolation &amp; Security: sandboxed execution; strict mediation and audit.</li> <li>Polyglot Development: Python, Node.js, Go, etc. supported via standard protocols.</li> <li>Modularity: many capabilities (identity, notifications, storage) are plugins; deploy only what you need.</li> </ul>"},{"location":"plugins/plugin-system/#communication-model-three-lanes","title":"Communication Model (Three Lanes)","text":"<p>All plugin-to-plugin communication is mediated by core. No direct calls.</p> <ul> <li>Canonical Event Lane: publish/subscribe via normalized events on the event bus (e.g., NATS). Example: HR publishes <code>UserCreated</code>; Accounting subscribes and reacts using the canonical User model.</li> <li>Operator API Lane: request/response via core\u2019s API gateway. Example: a plugin requests <code>GET /identity/users/{id}</code> through core; policy and authz enforced before routing to the target plugin.</li> <li>Proxy Lane: tightly controlled egress to external services via core proxy. Only allowlisted domains are reachable; responses are filtered and everything is audited. Can be disabled entirely.</li> </ul> <p>Note: In Phase 1, the event bus and a basic gateway exist; richer multi\u2011lane policies expand as the system grows.</p>"},{"location":"plugins/plugin-system/#plugin-manifest-contract","title":"Plugin Manifest &amp; Contract","text":"<p>Every plugin declares a manifest when registering with core. The manifest is the contract: it identifies the plugin, its interfaces, traits, security/compliance posture, and optional health/resources.</p> <p>Required/optional fields:</p> <ul> <li><code>id</code> (required): unique, lowercase letters/numbers/hyphens only. Example: <code>\"user-management\"</code>.</li> <li><code>name</code> (required): human\u2011readable display name.</li> <li><code>version</code> (required): semantic version (MAJOR.MINOR.PATCH), e.g. <code>\"1.0.0\"</code>.</li> <li><code>description</code> (recommended): short summary of functionality.</li> <li><code>contracts</code> (required): list of interface roles, e.g. <code>CommunicationPlugin</code>, <code>StoragePlugin</code>, <code>IdentityPlugin</code>. May include multiple.</li> <li><code>traits</code> (required \u22651): capability/security/compliance flags used by policy and UI (e.g., <code>handles_pii</code>, <code>handles_phi</code>, <code>audit_required</code>, <code>external_service</code>). Reserved/forbidden traits such as <code>admin</code>, <code>root</code>, <code>system</code> are rejected.</li> <li><code>dependencies</code> (optional): list of other plugin IDs this plugin requires.</li> <li><code>allowed_domains</code> (optional): external hostnames permitted for proxy egress. Required if <code>external_service</code> trait is present. Blocklists and format validation apply.</li> <li><code>endpoints</code> (optional): name \u2192 path mapping for exposed routes (health, APIs, webhooks). Informational and used for routing conventions.</li> <li><code>security</code> (object, required):</li> <li><code>authentication_required</code> (required, must be true): all real plugin endpoints require auth.</li> <li><code>data_classification</code> (required, non\u2011empty): any of <code>public</code>, <code>internal</code>, <code>confidential</code>, <code>pii</code>, <code>phi</code>.</li> <li><code>compliance</code> (object, required for sensitive data):</li> <li><code>hipaa_controls</code> (list): required if handling PHI; validated format (e.g., <code>\"164.312(a)\"</code>).</li> <li><code>audit_level</code> (string): <code>none|basic|detailed|complete</code>.</li> <li><code>health_check</code> (optional): e.g., <code>{ \"type\": \"http\", \"port\": 8000, \"path\": \"/health\" }</code> enables core polling.</li> <li><code>resources</code> (optional): <code>{ \"memory_limit\": MB, \"cpu_limit\": cores }</code> with sane ranges (memory: 64\u20138192 MB, CPU: 0.1\u20138.0).</li> </ul>"},{"location":"plugins/plugin-system/#example-manifest-user-management-identityplugin","title":"Example Manifest (User Management / IdentityPlugin)","text":"<pre><code>{\n  \"id\": \"user-management\",\n  \"name\": \"User Management Plugin\",\n  \"version\": \"1.0.0\",\n  \"description\": \"Manages user profiles and extended attributes\",\n  \"contracts\": [\"IdentityPlugin\"],\n  \"traits\": [\"handles_pii\", \"audit_required\"],\n  \"dependencies\": [],\n  \"allowed_domains\": [],\n  \"endpoints\": {\n    \"health\": \"/health\",\n    \"user_info\": \"/api/users/{id}\"\n  },\n  \"security\": {\n    \"authentication_required\": true,\n    \"data_classification\": [\"pii\", \"internal\"]\n  },\n  \"compliance\": {\n    \"hipaa_controls\": [\"164.312(a)\", \"164.312(d)\"],\n    \"audit_level\": \"detailed\"\n  }\n}\n</code></pre>"},{"location":"plugins/plugin-system/#security-validation","title":"Security Validation","text":"<p>Core validates manifests before accepting registration.</p> <ul> <li>Authentication required: <code>security.authentication_required</code> must be true.</li> <li>Data classification required: <code>security.data_classification</code> must contain only allowed values and be non\u2011empty.</li> <li>Traits required: at least one trait; reserved/dangerous traits are rejected.</li> <li>Trait consistency:</li> <li><code>handles_phi</code> \u2192 <code>data_classification</code> must include <code>phi</code> and <code>compliance.hipaa_controls</code> must be non\u2011empty.</li> <li><code>handles_pii</code> \u2192 <code>data_classification</code> must include <code>pii</code>.</li> <li><code>external_service</code> \u2192 <code>allowed_domains</code> must be non\u2011empty.</li> <li>Network security: each <code>allowed_domain</code> must be valid, not blocked (e.g., localhost, IP literals, private ranges), and well\u2011formed.</li> <li>Compliance: PHI/PII require appropriate controls and audit level; retention policies may be enforced by platform policy.</li> <li>Resources: if set, limits must be within allowed ranges and numeric.</li> <li>Dependencies: must be valid plugin IDs (lowercase, hyphenated). Circular/absent may be warned or rejected depending on phase/policy.</li> </ul> <p>Failures return clear 4xx errors (e.g., missing fields, invalid IDs, inconsistent traits/classification).</p>"},{"location":"plugins/plugin-system/#lifecycle-registration-enabledisable-unregister","title":"Lifecycle: Registration, Enable/Disable, Unregister","text":"<ul> <li>Register: plugin POSTs manifest to <code>POST /plugins/register</code>. On success, core returns a signed plugin JWT token for subsequent authenticated interactions. Core records status <code>registered</code>.</li> <li>Enable/Disable: admins (or policy) can disable a plugin (quarantine); core stops routing and/or health checks. Enabling re\u2011validates security and resumes participation and monitoring.</li> <li>Unregister: administrative or plugin\u2011initiated removal; core stops health checks and drops from the registry.</li> </ul> <p>Status values typically include <code>registered</code>, <code>active</code>, <code>disabled</code>. Health is tracked separately (see below).</p>"},{"location":"plugins/plugin-system/#health-monitoring","title":"Health Monitoring","text":"<p>Core can track health via:</p> <ul> <li>Active polling: if <code>health_check</code> is configured, core periodically pings the endpoint (HTTP 200 expected). Failure thresholds (e.g., 3 consecutive failures) mark <code>degraded</code>/<code>unhealthy</code>. Metrics from JSON responses (uptime, memory, etc.) may be recorded.</li> <li>Passive heartbeats: plugins can POST status/metrics to a heartbeat endpoint (planned); core updates <code>last_heartbeat</code> and merges status.</li> </ul> <p>Health states: <code>healthy</code>, <code>degraded</code>, <code>unhealthy</code>, <code>unknown</code>.</p>"},{"location":"plugins/plugin-system/#interactions-after-registration","title":"Interactions After Registration","text":"<ul> <li>Core \u2192 Plugin: gateway routes requests based on responsibilities/endpoints; attaches auth context.</li> <li>Plugin \u2192 Core: plugin uses its JWT to call core services; operations are authorized via traits/policy and plugin state (e.g., unhealthy plugins are blocked from sensitive ops).</li> <li>Plugin \u2192 Plugin: mediated via Operator API lane (core gateway). Direct calls between plugins are not allowed.</li> <li>External calls: go through core proxy; enforced by <code>allowed_domains</code> and policy. Direct egress is discouraged and may be blocked in hardened deployments.</li> </ul>"},{"location":"plugins/plugin-system/#management-interfaces","title":"Management Interfaces","text":"<ul> <li>Admin Console: trait\u2011aware UI lists plugins, status, health; supports enable/disable and configuration. Surfaces are gated by admin/trait permissions.</li> <li>CLI/SDK: tools to validate manifests and scaffold plugins; future commands for packaging/deploy/testing.</li> <li>Documentation: each plugin should ship a doc page describing purpose, setup, and endpoints; plugin pages appear under the Plugins section with a table of contents.</li> </ul>"},{"location":"plugins/plugin-system/#example-user-management-plugin","title":"Example: User Management Plugin","text":"<p>A minimal IdentityPlugin demonstrating registration and endpoints:</p> <ul> <li>FastAPI service with <code>/health</code> returning <code>{ \"status\": \"healthy\", \"plugin\": \"user-management\" }</code>.</li> <li><code>GET /api/users/{user_id}</code> returns placeholder extended profile data (e.g., department, manager, traits). Real implementations would back this with storage or core identity data.</li> <li>Registers on startup, stores issued plugin token (e.g., in <code>PLUGIN_TOKEN</code>) and uses it for authenticated interactions with core.</li> <li>Traits: <code>handles_pii</code>, <code>audit_required</code>; Classification: <code>[\"pii\", \"internal\"]</code>; Compliance: <code>audit_level: detailed</code> (HIPAA control examples shown).</li> </ul>"},{"location":"plugins/plugin-system/#compliance-security-notes","title":"Compliance &amp; Security Notes","text":"<ul> <li>HIPAA: plugins handling PHI must declare <code>phi</code> classification and list applicable <code>hipaa_controls</code>; audit must be enabled at appropriate depth.</li> <li>Zero\u2011trust: every cross\u2011plugin interaction is mediated and audited; default\u2011deny stance for proxy egress and dangerous operations.</li> <li>No CLI\u2011only features: all capabilities must be operable through the Admin Console with trait gating.</li> </ul>"},{"location":"plugins/plugin-system/#next-steps","title":"Next Steps","text":"<ul> <li>Build new plugins from this contract; validate manifests locally.</li> <li>Declare external domains explicitly and keep them minimal.</li> <li>Add <code>health_check</code> for production to enable proactive monitoring.</li> <li>Keep docs for each plugin up to date; changes in code should be reflected here to remain the source of truth.</li> </ul>"},{"location":"reference/apis/","title":"API Reference","text":"<p>Complete API documentation for the Vivified platform.</p>"},{"location":"reference/apis/#coming-soon","title":"Coming Soon","text":"<p>API reference documentation is being generated.</p>"},{"location":"sdk/overview/","title":"SDK Overview","text":"<p>The Vivified SDK provides language-specific libraries for building plugins.</p>"},{"location":"sdk/overview/#coming-soon","title":"Coming Soon","text":"<p>SDK documentation is being generated.</p>"}]}