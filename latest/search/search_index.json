{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Vivified","text":"<p>Welcome to the Vivified platform documentation. This site covers the core platform, plugins, and developer workflows.</p> <ul> <li>Core: The orchestrator and gateway that mediate all plugin interactions.</li> <li>Plugins: Isolated services implementing domain features and integrations.</li> <li>SDKs: Language helpers for building plugins against the Vivified contracts.</li> </ul> <p>Use the sidebar to navigate topics.</p>"},{"location":"contributing/","title":"Contributing","text":"<p>Development workflow</p> <ul> <li>Create a feature branch off <code>development</code></li> <li>Follow conventional commits (e.g., <code>feat(core): add X</code>)</li> <li>Add/Update tests and docs with any code changes</li> <li>Open a PR and ensure CI passes</li> </ul> <p>Documentation</p> <ul> <li>Docs live under <code>docs/</code> and are built with MkDocs</li> <li>Versioning is managed with <code>mike</code> (alias <code>latest</code> tracks the dev docs)</li> <li>CI validates docs with <code>mkdocs build --strict</code></li> </ul> <p>Make targets</p> <ul> <li><code>make docs</code> \u2014 Build docs site locally</li> <li><code>make docs-serve</code> \u2014 Serve docs locally at http://127.0.0.1:8000</li> </ul>"},{"location":"getting-started/","title":"Getting Started","text":"<p>This guide helps you run the Phase 1 scaffold locally.</p> <p>Prerequisites</p> <ul> <li>Docker and Docker Compose</li> <li>Python 3.11+ (for local testing)</li> </ul> <p>Quick start</p> <ol> <li>Build and start: <code>make up</code></li> <li>Check core health: <code>curl http://localhost:8000/health</code></li> <li>Verify plugin registration: <code>curl http://localhost:8000/plugins</code></li> </ol> <p>Development commands</p> <ul> <li><code>make test</code> \u2014 Runs unit tests</li> <li><code>make lint</code> \u2014 Runs linters</li> <li><code>make proto</code> \u2014 Compiles protobufs</li> <li><code>make down</code> \u2014 Stops services</li> </ul> <p>Next steps</p> <ul> <li>Read Core Overview to see how plugin registration works in Phase 1.</li> </ul>"},{"location":"architecture/diagrams/","title":"Architecture Diagrams","text":"<p>System architecture diagrams and flow charts. See also: Three-Lane Model.</p>"},{"location":"architecture/diagrams/#three-lane-overview","title":"Three-Lane Overview","text":"<pre><code>flowchart TB\n  %% Three-Lane overview with wrapped labels\n  classDef box fill:#eef5ff,stroke:#4c6ef5,color:#222,stroke-width:1px\n\n  subgraph Plugin[Plugin Container\\n(no outbound network)]\n    P1[\"LLM Plugin\\nclassify=PHI\\ntrace_id=...\\nrefs not raw PHI\"]:::box\n  end\n\n  CoreGW[\"Core Gateway\\n(Operator RPC)\"]:::box\n  Canonical[\"Canonical Engine\\n(schema + policy + audit)\"]:::box\n  Proxy[\"Core Proxy\\n(allowlist + TLS + secrets)\"]:::box\n  Vectorizer[\"Vectorizer Plugin\\n(Embed op)\"]:::box\n\n  P1 -- \"Operator: Embed\" --&gt; CoreGW\n  CoreGW -- \"dispatch\" --&gt; Vectorizer\n  P1 -- \"Canonical: DocumentSummarized\" --&gt; Canonical\n  P1 -- \"Proxy: chat completions\" --&gt; Proxy\n\n  class P1,CoreGW,Canonical,Proxy,Vectorizer box\n</code></pre>"},{"location":"architecture/diagrams/#defaults-and-fallbacks","title":"Defaults and Fallbacks","text":"<pre><code>flowchart TB\n  %% Default backends and fail-safe fallbacks\n  classDef box fill:#f4fff4,stroke:#2e7d32,color:#222,stroke-width:1px\n  classDef warn fill:#fff8e1,stroke:#f9a825,color:#222,stroke-width:1px\n\n  subgraph Core[Core Services]\n    DB[(Postgres\\npostgresql+asyncpg)]:::box\n    RAG[(Redis\\nredis://localhost:6379/0)]:::box\n  end\n\n  subgraph Fallbacks[Graceful Fallbacks]\n    MemDB[(SQLite in-tests\\nTEST_DB_URL or in-memory)]:::warn\n    MemRAG[(In-memory RAG\\nif Redis unreachable)]:::warn\n  end\n\n  Core --&gt; Fallbacks\n  DB -. tests only .-&gt; MemDB\n  RAG -. on failure .-&gt; MemRAG\n</code></pre>"},{"location":"core/messaging/","title":"Messaging (Canonical Event Bus and Direct Messages)","text":"<p>Vivified provides two paths for plugin-to-plugin communication:</p> <ul> <li>Canonical events: fan-out via the Event Bus with policy and audit.</li> <li>Direct messages: point-to-point delivery via the Core gateway to a plugin inbox endpoint.</li> </ul> <p>The Event Bus supports pluggable backends selected by <code>EVENT_BUS_BACKEND</code> (memory, nats, redis). Direct message delivery is handled by Core and dispatched to plugins over HTTP with retry/backoff and best\u2011effort persistence.</p>"},{"location":"core/messaging/#what-you-need-to-do","title":"What You Need To Do","text":"<ul> <li>Ensure plugins expose an inbox endpoint:</li> <li>Recommended to add endpoint key <code>message.receive</code> (or <code>messages.receive</code>, <code>inbox</code>, or <code>message</code>) in the plugin manifest to point to the handler path (e.g., <code>/inbox</code>).</li> <li>Configure operator allowlists:</li> <li>Use <code>POST /admin/operator/allowlist/auto-generate</code> to seed from the target manifest, then refine if needed.</li> <li>Optional dev-mode: set <code>DEV_MODE=true</code> or <code>operator.allow.dev_all=true</code> in ConfigService to allow manifest-declared operations without explicit allowlist during development.</li> <li>Optional tuning via env:</li> <li><code>MESSAGE_MAX_ATTEMPTS</code>, <code>MESSAGE_RETRY_BASE_SECONDS</code>, <code>MESSAGE_DELIVERY_TIMEOUT</code>.</li> </ul>"},{"location":"core/messaging/#admin-console-first","title":"Admin Console First","text":"<ul> <li>Use Admin Console \u2192 Operator Policy to:</li> <li>Auto\u2011generate operator rules from a target plugin manifest (button: \u201cAuto\u2011generate\u201d).</li> <li>Toggle development mode to allow manifest\u2011declared operations without explicit allowlist.</li> <li>View and edit allowed operations per caller\u2192target.</li> </ul>"},{"location":"core/messaging/#delivery-semantics","title":"Delivery Semantics","text":"<ul> <li>Direct messages are delivered with exponential backoff and audit logging.</li> <li>Pending messages are stored in ConfigService under <code>messaging.pending.&lt;message_id&gt;</code> and cleared on successful delivery (best\u2011effort at\u2011least\u2011once).</li> <li>For durable streams (high volume), configure an external broker (NATS/Redis) and consider enabling stream semantics in the next iteration.</li> </ul>"},{"location":"core/overview/","title":"Core Overview","text":"<p>The Vivified Core is a FastAPI service that mediates all plugin interactions.</p> <p>Endpoints (Phase 1)</p> <ul> <li><code>GET /health</code> \u2014 Health check</li> <li><code>POST /plugins/register</code> \u2014 Register a plugin with a manifest</li> <li><code>GET /plugins</code> \u2014 List registered plugins</li> <li><code>POST /plugins/{plugin_id}/heartbeat</code> \u2014 Update plugin heartbeat</li> </ul> <p>Key modules</p> <ul> <li><code>core/main.py</code> \u2014 FastAPI app and REST endpoints</li> <li><code>core/plugin_manager/registry.py</code> \u2014 In-memory plugin registry with JWT issuance</li> <li><code>core/plugin_interface.py</code> \u2014 Base plugin contracts</li> <li><code>core/proto/canonical_models.proto</code> \u2014 Canonical data models (proto)</li> </ul> <p>Security and compliance</p> <ul> <li>Phase 1 keeps registration open; later phases add authN/Z checks</li> <li>Logging avoids PII/PHI and includes a trace id</li> </ul>"},{"location":"plugins/overview/","title":"Plugins Overview","text":"<p>Plugins are isolated services that implement features and integrations. In Phase 1, we ship a minimal <code>user_management</code> plugin to exercise the interface.</p> <p>User Management plugin</p> <ul> <li>Registers itself with core on startup</li> <li>Exposes <code>/health</code> and a placeholder <code>/api/users/{user_id}</code> endpoint</li> </ul> <p>Manifest fields (subset)</p> <ul> <li><code>id</code>, <code>name</code>, <code>version</code> \u2014 Basic identity</li> <li><code>contracts</code> \u2014 Capabilities implemented (e.g., <code>IdentityPlugin</code>)</li> <li><code>traits</code> \u2014 Security and behavior hints (e.g., <code>handles_pii</code>)</li> <li><code>security</code> and <code>compliance</code> \u2014 HIPAA-related metadata</li> </ul> <p>See <code>plugins/user_management/main.py</code> for a concrete example.</p>"},{"location":"policy/operator-allowlist/","title":"Operator Allowlist","text":"<p>Operator Lane RPCs are allowed on a per\u2011caller\u2192target basis. Core enforces a fine\u2011grained allowlist stored in ConfigService at keys like <code>operator.allow.&lt;caller-&gt;target&gt;</code>.</p>"},{"location":"policy/operator-allowlist/#admin-console","title":"Admin Console","text":"<ul> <li>Open Admin Console \u2192 Operator Policy.</li> <li>Enter caller and target plugin IDs.</li> <li>Click \u201cAuto\u2011generate\u201d to seed operations from the target plugin\u2019s manifest endpoints.</li> <li>Edit or paste operations, then click Save.</li> <li>Optional: Toggle \u201cAllow manifest\u2011declared operations without explicit allowlist\u201d for development, then \u201cSave Dev Toggle\u201d. This sets <code>operator.allow.dev_all</code> in ConfigService.</li> </ul>"},{"location":"policy/operator-allowlist/#api","title":"API","text":"<ul> <li>Get: <code>GET /admin/operator/allowlist?caller=&lt;id&gt;&amp;target=&lt;id&gt;</code> \u2192 <code>{ caller, target, operations[] }</code></li> <li>Set: <code>PUT /admin/operator/allowlist { caller, target, operations[] }</code></li> <li>Auto\u2011generate: <code>POST /admin/operator/allowlist/auto-generate { caller, target, merge?: true }</code></li> <li>Uses the target plugin\u2019s manifest <code>endpoints</code> keys as operations. When <code>merge=true</code>, merges with existing operations.</li> </ul>"},{"location":"policy/operator-allowlist/#development-mode","title":"Development Mode","text":"<ul> <li>For development only, you can allow any operation that is declared in the target\u2019s manifest without adding it to the allowlist:</li> <li>Env: <code>DEV_MODE=true</code>, or</li> <li>Config: <code>operator.allow.dev_all=true</code> (via Admin Console \u2192 Operator Policy toggle)</li> </ul> <p>This preserves Admin Console parity while enabling quick iteration.</p>"},{"location":"reference/env-vars/","title":"Environment Variables","text":"<p>Key runtime environment variables used by Core messaging and delivery:</p> <ul> <li><code>EVENT_BUS_BACKEND</code>: Select the Event Bus backend.</li> <li>Values: <code>memory</code> (default), <code>nats</code>, <code>redis</code></li> <li>Related (when applicable): <code>NATS_SERVERS</code>, <code>REDIS_URL</code></li> <li><code>MESSAGE_MAX_ATTEMPTS</code>: Direct message delivery retry attempts (default: 3)</li> <li><code>MESSAGE_RETRY_BASE_SECONDS</code>: Base backoff seconds (default: 2.0)</li> <li><code>MESSAGE_DELIVERY_TIMEOUT</code>: HTTP delivery timeout seconds (default: 30)</li> <li><code>DEV_MODE</code>: When <code>true</code>, unlocks development shortcuts (e.g., Operator Lane dev allow behavior)</li> </ul> <p>ConfigService toggles (set via Admin Console):</p> <ul> <li><code>operator.allow.dev_all</code>: When true, allow any operation declared in the target\u2019s manifest without explicit allowlist (development only).</li> </ul>"}]}