{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Vivified","text":"<p>Welcome to the Vivified platform documentation. This site covers the core platform, plugins, and developer workflows.</p> <ul> <li>Core: The orchestrator and gateway that mediate all plugin interactions.</li> <li>Plugins: Isolated services implementing domain features and integrations.</li> <li>SDKs: Language helpers for building plugins against the Vivified contracts.</li> </ul> <p>Use the sidebar to navigate topics.</p>"},{"location":"contributing/","title":"Contributing","text":"<p>Development workflow</p> <ul> <li>Create a feature branch off <code>development</code></li> <li>Follow conventional commits (e.g., <code>feat(core): add X</code>)</li> <li>Add/Update tests and docs with any code changes</li> <li>Open a PR and ensure CI passes</li> </ul> <p>Documentation</p> <ul> <li>Docs live under <code>docs/</code> and are built with MkDocs</li> <li>Versioning is managed with <code>mike</code> (alias <code>latest</code> tracks the dev docs)</li> <li>CI validates docs with <code>mkdocs build --strict</code></li> </ul> <p>Make targets</p> <ul> <li><code>make docs</code> \u2014 Build docs site locally</li> <li><code>make docs-serve</code> \u2014 Serve docs locally at http://127.0.0.1:8000</li> </ul>"},{"location":"getting-started/","title":"Getting Started","text":"<p>This guide helps you run the Phase 1 scaffold locally.</p> <p>Prerequisites</p> <ul> <li>Docker and Docker Compose</li> <li>Python 3.11+ (for local testing)</li> </ul> <p>Quick start</p> <ol> <li>Build and start: <code>make up</code></li> <li>Check core health: <code>curl http://localhost:8000/health</code></li> <li>Verify plugin registration: <code>curl http://localhost:8000/plugins</code></li> </ol> <p>Development commands</p> <ul> <li><code>make test</code> \u2014 Runs unit tests</li> <li><code>make lint</code> \u2014 Runs linters</li> <li><code>make proto</code> \u2014 Compiles protobufs</li> <li><code>make down</code> \u2014 Stops services</li> </ul> <p>Next steps</p> <ul> <li>Read Core Overview to see how plugin registration works in Phase 1.</li> </ul>"},{"location":"architecture/diagrams/","title":"Architecture Diagrams","text":"<p>System architecture diagrams and flow charts. See also: Three-Lane Model.</p>"},{"location":"architecture/diagrams/#three-lane-overview","title":"Three-Lane Overview","text":"<pre><code>flowchart TB\n  %% Three-Lane overview with wrapped labels\n  classDef box fill:#eef5ff,stroke:#4c6ef5,color:#222,stroke-width:1px\n\n  subgraph Plugin[Plugin Container\\n(no outbound network)]\n    P1[\"LLM Plugin\\nclassify=PHI\\ntrace_id=...\\nrefs not raw PHI\"]:::box\n  end\n\n  CoreGW[\"Core Gateway\\n(Operator RPC)\"]:::box\n  Canonical[\"Canonical Engine\\n(schema + policy + audit)\"]:::box\n  Proxy[\"Core Proxy\\n(allowlist + TLS + secrets)\"]:::box\n  Vectorizer[\"Vectorizer Plugin\\n(Embed op)\"]:::box\n\n  P1 -- \"Operator: Embed\" --&gt; CoreGW\n  CoreGW -- \"dispatch\" --&gt; Vectorizer\n  P1 -- \"Canonical: DocumentSummarized\" --&gt; Canonical\n  P1 -- \"Proxy: chat completions\" --&gt; Proxy\n\n  class P1,CoreGW,Canonical,Proxy,Vectorizer box\n</code></pre>"},{"location":"architecture/diagrams/#defaults-and-fallbacks","title":"Defaults and Fallbacks","text":"<pre><code>flowchart TB\n  %% Default backends and fail-safe fallbacks\n  classDef box fill:#f4fff4,stroke:#2e7d32,color:#222,stroke-width:1px\n  classDef warn fill:#fff8e1,stroke:#f9a825,color:#222,stroke-width:1px\n\n  subgraph Core[Core Services]\n    DB[(Postgres\\npostgresql+asyncpg)]:::box\n    RAG[(Redis\\nredis://localhost:6379/0)]:::box\n  end\n\n  subgraph Fallbacks[Graceful Fallbacks]\n    MemDB[(SQLite in-tests\\nTEST_DB_URL or in-memory)]:::warn\n    MemRAG[(In-memory RAG\\nif Redis unreachable)]:::warn\n  end\n\n  Core --&gt; Fallbacks\n  DB -. tests only .-&gt; MemDB\n  RAG -. on failure .-&gt; MemRAG\n</code></pre>"},{"location":"core/overview/","title":"Core Overview","text":"<p>The Vivified Core is a FastAPI service that mediates all plugin interactions.</p> <p>Endpoints (Phase 1)</p> <ul> <li><code>GET /health</code> \u2014 Health check</li> <li><code>POST /plugins/register</code> \u2014 Register a plugin with a manifest</li> <li><code>GET /plugins</code> \u2014 List registered plugins</li> <li><code>POST /plugins/{plugin_id}/heartbeat</code> \u2014 Update plugin heartbeat</li> </ul> <p>Key modules</p> <ul> <li><code>core/main.py</code> \u2014 FastAPI app and REST endpoints</li> <li><code>core/plugin_manager/registry.py</code> \u2014 In-memory plugin registry with JWT issuance</li> <li><code>core/plugin_interface.py</code> \u2014 Base plugin contracts</li> <li><code>core/proto/canonical_models.proto</code> \u2014 Canonical data models (proto)</li> </ul> <p>Security and compliance</p> <ul> <li>Phase 1 keeps registration open; later phases add authN/Z checks</li> <li>Logging avoids PII/PHI and includes a trace id</li> </ul>"},{"location":"plugins/overview/","title":"Plugins Overview","text":"<p>Plugins are isolated services that implement features and integrations. In Phase 1, we ship a minimal <code>user_management</code> plugin to exercise the interface.</p> <p>User Management plugin</p> <ul> <li>Registers itself with core on startup</li> <li>Exposes <code>/health</code> and a placeholder <code>/api/users/{user_id}</code> endpoint</li> </ul> <p>Manifest fields (subset)</p> <ul> <li><code>id</code>, <code>name</code>, <code>version</code> \u2014 Basic identity</li> <li><code>contracts</code> \u2014 Capabilities implemented (e.g., <code>IdentityPlugin</code>)</li> <li><code>traits</code> \u2014 Security and behavior hints (e.g., <code>handles_pii</code>)</li> <li><code>security</code> and <code>compliance</code> \u2014 HIPAA-related metadata</li> </ul> <p>See <code>plugins/user_management/main.py</code> for a concrete example.</p>"}]}