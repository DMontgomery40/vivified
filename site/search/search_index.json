{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Vivified Platform","text":""},{"location":"#enterprise-application-kernel-with-plugin-architecture","title":"Enterprise application kernel with plugin architecture","text":"<p>Vivified is a modular platform for building secure, scalable applications. Deploy anything from ERP systems to security operations centers, messaging hubs to compliance platforms.</p> <ul> <li> <p> Getting Started</p> <p>Set up Vivified locally in 5 minutes</p> <p> Quick start</p> </li> <li> <p> Plugin Development</p> <p>Build and deploy custom plugins</p> <p> Plugin SDK</p> </li> <li> <p> API Reference</p> <p>REST, WebSocket, and RPC documentation</p> <p> API docs</p> </li> <li> <p> Deployment</p> <p>Production deployment guides</p> <p> Deploy</p> </li> </ul>"},{"location":"#platform-overview","title":"Platform Overview","text":"<p>Vivified provides a secure foundation for enterprise applications through its three-lane communication model and trait-based access control (TBAC).</p>"},{"location":"#architecture","title":"Architecture","text":"<pre><code>graph TB\n    subgraph \"Applications\"\n        APP1[ERP System]\n        APP2[Security Platform]\n        APP3[Messaging Hub]\n        APP4[Custom Application]\n    end\n\n    subgraph \"Core Platform\"\n        GW[Gateway]\n        AUTH[Identity &amp; TBAC]\n        POL[Policy Engine]\n        STOR[Storage Service]\n        MSG[Message Bus]\n        AUDIT[Audit Service]\n    end\n\n    subgraph \"Plugins\"\n        P1[Splunk Integration]\n        P2[Slack/Teams]\n        P3[Database Connectors]\n        P4[Custom Plugins]\n    end\n\n    APP1 --&gt; GW\n    APP2 --&gt; GW\n    APP3 --&gt; GW\n    APP4 --&gt; GW\n\n    GW --&gt; AUTH\n    AUTH --&gt; POL\n    GW --&gt; MSG\n    MSG --&gt; P1\n    MSG --&gt; P2\n    MSG --&gt; P3\n    MSG --&gt; P4</code></pre>"},{"location":"#use-cases","title":"Use Cases","text":"Enterprise OperationsSecurity OperationsHealthcare &amp; Compliance <p>ERP for SMB - Inventory management plugins - Financial processing - HR workflows - Custom reporting</p> <p>Messaging Nerve Center - Route faxes to Slack/Teams - Push notifications via Pushover - Email-to-SMS bridges - Trait-based routing (no manual lists)</p> <p>Red Team/Blue Team Platform - Splunk integration - Custom SIEM from your SOC - Aircrack-ng automation - Vulnerability scanning orchestration</p> <p>Compliance &amp; Audit - Automated compliance checks - Audit trail aggregation - Policy enforcement - Report generation</p> <p>HIPAA-Compliant Systems - Patient data management - Clinical workflows - Insurance processing - Regulatory reporting</p> <p>Financial Services - Transaction processing - Risk assessment - Regulatory compliance - Audit requirements</p>"},{"location":"#core-features","title":"Core Features","text":"Feature Description Use Case Trait-Based Access Control Dynamic permission system based on user/service traits No manual ACL maintenance Three-Lane Communication Canonical events, RPC operations, proxied external calls Clean plugin isolation Plugin Architecture Hot-loadable plugins with sandboxing Extend without modifying core Audit Service Comprehensive audit logging with configurable retention Compliance and debugging Policy Engine Declarative policies for access control Fine-grained permissions Storage Abstraction Pluggable storage backends Use existing infrastructure"},{"location":"#development","title":"Development","text":"<p>Language Support</p> <p>Both Python and Node.js SDKs provide identical functionality. Choose based on your existing stack.</p>"},{"location":"#plugin-example","title":"Plugin Example","text":"PythonNode.jsConfiguration <pre><code>from vivified import Plugin, canonical, operator\n\nclass IntegrationPlugin(Plugin):\n    \"\"\"Example integration plugin\"\"\"\n\n    @canonical.subscribe(\"document.received\")\n    async def handle_document(self, event):\n        # Route based on traits\n        recipients = await self.identity.find_by_traits(\n            [\"department:finance\", \"notify:documents\"]\n        )\n\n        for recipient in recipients:\n            await self.send_notification(recipient, event.data)\n\n    @operator.expose(\"send_notification\")\n    async def send_notification(self, recipient, data):\n        # Send via configured channel\n        channel = recipient.traits.get(\"preferred_channel\", \"email\")\n        return await self.channels[channel].send(recipient, data)\n</code></pre> <pre><code>import { Plugin, canonical, operator } from '@vivified/sdk';\n\nclass IntegrationPlugin extends Plugin {\n  @canonical.subscribe('document.received')\n  async handleDocument(event) {\n    // Route based on traits\n    const recipients = await this.identity.findByTraits([\n      'department:finance',\n      'notify:documents'\n    ]);\n\n    for (const recipient of recipients) {\n      await this.sendNotification(recipient, event.data);\n    }\n  }\n\n  @operator.expose('sendNotification')\n  async sendNotification(recipient, data) {\n    // Send via configured channel\n    const channel = recipient.traits.preferredChannel || 'email';\n    return await this.channels[channel].send(recipient, data);\n  }\n}\n</code></pre> <pre><code># plugin.yaml\nname: integration-plugin\nversion: 1.0.0\ntraits:\n  - can_send_notifications\n  - can_access_user_directory\nchannels:\n  email:\n    provider: smtp\n    host: mail.example.com\n  slack:\n    webhook_url: ${SLACK_WEBHOOK}\n  pushover:\n    app_token: ${PUSHOVER_TOKEN}\n</code></pre>"},{"location":"#communication-patterns","title":"Communication Patterns","text":"Three-Lane Model <p>Canonical Lane - Event-driven messaging - Asynchronous processing - Event sourcing patterns - Loose coupling between services</p> <p>Operator Lane - Synchronous RPC - Direct method invocation - Request/response patterns - Strong typing support</p> <p>Proxy Lane - External API access - Controlled external communication - Rate limiting and retry logic - Credential management</p>"},{"location":"#quick-start","title":"Quick Start","text":""},{"location":"#local-development","title":"Local Development","text":"<pre><code># Clone repository\ngit clone https://github.com/DMontgomery40/vivified.git\ncd vivified\n\n# Start services\ndocker-compose up -d\n\n# Verify health\ncurl http://localhost:8080/health\n\n# View logs\ndocker-compose logs -f\n</code></pre>"},{"location":"#configuration","title":"Configuration","text":"<p>Environment Variables</p> <p>See <code>.env.example</code> for all configuration options</p> Variable Description Default <code>GATEWAY_PORT</code> API gateway port <code>8080</code> <code>DATABASE_URL</code> PostgreSQL connection string <code>postgres://localhost/vivified</code> <code>REDIS_URL</code> Redis connection for caching <code>redis://localhost:6379</code> <code>LOG_LEVEL</code> Logging verbosity <code>info</code> <code>PLUGIN_DIR</code> Plugin directory path <code>./plugins</code>"},{"location":"#production-deployment","title":"Production Deployment","text":"KubernetesDocker SwarmAWS ECS <pre><code># vivified-deployment.yaml\napiVersion: apps/v1\nkind: Deployment\nmetadata:\n  name: vivified-core\nspec:\n  replicas: 3\n  selector:\n    matchLabels:\n      app: vivified\n  template:\n    metadata:\n      labels:\n        app: vivified\n    spec:\n      containers:\n      - name: vivified\n        image: vivified/core:latest\n        env:\n        - name: DATABASE_URL\n          valueFrom:\n            secretKeyRef:\n              name: vivified-secrets\n              key: database-url\n</code></pre> <pre><code># docker-stack.yml\nversion: '3.8'\nservices:\n  vivified:\n    image: vivified/core:latest\n    deploy:\n      replicas: 3\n      update_config:\n        parallelism: 1\n        delay: 10s\n    environment:\n      DATABASE_URL: ${DATABASE_URL}\n</code></pre> <pre><code>{\n  \"family\": \"vivified\",\n  \"taskDefinition\": {\n    \"containerDefinitions\": [{\n      \"name\": \"vivified-core\",\n      \"image\": \"vivified/core:latest\",\n      \"memory\": 2048,\n      \"cpu\": 1024,\n      \"essential\": true\n    }]\n  }\n}\n</code></pre>"},{"location":"#documentation","title":"Documentation","text":"<ul> <li>Core Services - Gateway, Identity, Policy, Storage</li> <li>Plugin Development - SDK reference and examples</li> <li>Admin Console - Web-based management interface</li> <li>API Reference - REST, WebSocket, and RPC APIs</li> <li>Deployment Guide - Production deployment</li> <li>Troubleshooting - Common issues and solutions</li> </ul>"},{"location":"#community","title":"Community","text":"<ul> <li>GitHub Issues - Bug reports and feature requests</li> <li>Discussions - Questions and community support</li> <li>Contributing - Contribution guidelines</li> </ul> <p>MIT License | GitHub</p>"},{"location":"admin-console/","title":"Admin Console","text":"<ul> <li> <p>:material-dashboard:{ .lg .middle } Admin Console</p> <p>Single-pane management for all platform features, accessible and dyslexia-friendly</p> </li> <li> <p>:material-plugin:{ .lg .middle } Plugin Marketplace</p> <p>Browse, install, and configure plugins from the console</p> </li> <li> <p>:material-settings:{ .lg .middle } Configuration Center</p> <p>Manage environment variables, retention policies, and system settings</p> </li> </ul> <p>!!! tip 'Accessibility &amp; Dyslexia'     The Admin Console uses readable fonts, high-contrast themes, and keyboard-first navigation. Toggle dyslexia settings in Settings &gt; Accessibility.</p> <p>!!! note 'Admin-first requirement'     Everything available via CLI must have an equivalent or better experience in the Admin Console.</p> <p>!!! warning 'Permissions'     Admin Console actions are controlled by RBAC. Users without sufficient roles will not see certain actions.</p>"},{"location":"admin-console/#key-screens","title":"Key screens","text":"Screen Purpose Access Dashboard Health, metrics, quick actions admin Plugins Marketplace &amp; registrations admin Storage Browser Browse classified objects admin/storage Policy Inspector Review routing and filter rules admin/policy <ul> <li> <p>:material-search:{ .lg .middle } Search &amp; Filter</p> <p>Global search across users, plugins, and audit logs</p> </li> <li> <p>:material-visibility:{ .lg .middle } Audit Explorer</p> <p>View and export audit trails for compliance</p> </li> </ul>"},{"location":"admin-console/#keyboard-shortcuts","title":"Keyboard shortcuts","text":"<ul> <li>Ctrl+K \u2014 open command palette</li> <li>Ctrl+F \u2014 focus search</li> <li>Esc \u2014 close modals</li> </ul>"},{"location":"admin-console/#building-admin-ui-locally","title":"Building Admin UI locally","text":"PythonNode.jscurl <pre><code># (1)\n# Build scripts invoked from repo Makefile; these are examples\n</code></pre> <pre><code>// (1)\n// Example: build admin UI\n// cd core/admin_ui &amp;&amp; npm ci &amp;&amp; npm run build\n</code></pre> <pre><code># (1)\nmake ui-ci-local || echo 'UI build failed'\n</code></pre> <ol> <li>The Admin Console is packaged as an SPA and served under /admin/ui. Ensure UI build artifacts are available in production deploys.</li> </ol> <pre><code>graph LR\n  AdminUser --&gt; Browser\n  Browser --&gt;|HTTPS| AdminConsole\n  AdminConsole --&gt; AdminAPI\n  AdminAPI --&gt; CoreServices</code></pre>"},{"location":"admin-console/#settings-and-configuration","title":"Settings and configuration","text":"Setting Purpose Where to edit Notes THEME UI theme (default/high contrast) Settings &gt; Appearance Accessibility setting RETENTION_YEARS Default PHI retention Settings &gt; Storage Overrides per plugin allowed PLUGIN_APPROVAL Require approval for plugin install Settings &gt; Plugins Recommended for prod <p>!!! note 'Audit for UI actions'     Every UI change emits an audit event (actor, action, target). Use Audit Explorer to trace actions.</p> <p>??? note 'Advanced: embedding widgets'     Plugins can register Admin UI widgets via the manifest and a JS entrypoint. Follow the UI component style guide in core/ui.</p> <ol> <li> <p>The Admin Console is the primary integration point for non-developer users and must support assistive technologies.\u00a0\u21a9</p> </li> </ol>"},{"location":"api-reference/","title":"API Reference","text":"<ul> <li> <p> Admin API</p> <p>Role-based endpoints for system management and plugin operations</p> </li> <li> <p> User &amp; Role Management</p> <p>CRUD for users, roles, and assignments</p> </li> <li> <p> Plugin &amp; Config API</p> <p>Register plugins, query audits, and manage configuration via API</p> </li> </ul> <p>!!! tip 'Use role-scoped tokens'     Create service tokens with minimal scopes for automation and integrations.</p> <p>!!! note 'Rate limits'     Admin API enforces per-client rate-limits managed via the gateway configuration.</p> <p>!!! warning 'Audit queries may be large'     Use pagination and filters when querying audit logs to avoid long-running requests.</p>"},{"location":"api-reference/#common-endpoints","title":"Common endpoints","text":"Endpoint Purpose Method Auth /api/users Manage users GET/POST/PUT/DELETE admin /api/plugins Register/list plugins GET/POST admin /api/config Read/update config GET/PUT admin /api/audit Query audit logs GET admin/audit"},{"location":"api-reference/#example-create-a-user","title":"Example: Create a user","text":"PythonNode.jscurl <pre><code># (1)\nimport requests\ntoken = 'Bearer &lt;ADMIN_TOKEN&gt;'\nr = requests.post('https://admin.example/api/users', headers={'Authorization': token}, json={'username':'alice'})\nprint(r.json())\n</code></pre> <pre><code>// (1)\nconst fetch = require('node-fetch')\nconst res = await fetch('https://admin.example/api/users', { method: 'POST', headers: { Authorization: 'Bearer &lt;ADMIN_TOKEN&gt;', 'Content-Type': 'application/json' }, body: JSON.stringify({ username: 'alice' }) })\nconsole.log(await res.json())\n</code></pre> <pre><code># (1)\ncurl -X POST https://admin.example/api/users -H 'Authorization: Bearer &lt;ADMIN_TOKEN&gt;' -H 'Content-Type: application/json' -d '{\"username\":\"alice\"}'\n</code></pre> <ol> <li>Use scoped tokens and role assertions; avoid admin tokens in automation when possible</li> </ol> <pre><code>graph LR\n  AdminUI --&gt;|API Calls| API\n  API --&gt; AuthService\n  API --&gt; Storage\n  API --&gt; Plugins\n  API --&gt; Audit</code></pre>"},{"location":"api-reference/#audit-api-filtering","title":"Audit API: filtering","text":"Filter Description Example actor Who performed action actor=system or user id action Action type create,user.update since ISO datetime 2024-01-01T00:00:00Z <p>!!! note 'Pagination'     The Admin API uses cursor-based pagination for large datasets. Check response for ++next_cursor++ field.</p> <p>??? note 'Advanced: webhook integrations'     The Admin API supports webhook delivery for events. Use signed payloads and retry policies.</p> <ol> <li> <p>API access is audited and role-checked. Ensure service accounts are limited in scope and rotated regularly.\u00a0\u21a9</p> </li> </ol>"},{"location":"configuration/","title":"Configuration","text":"<ul> <li> <p>:material-settings:{ .lg .middle } Configuration Reference</p> <p>Centralized environment and configuration keys for the Vivified platform</p> </li> <li> <p> Per-service settings</p> <p>Config keys for canonical, storage, messaging, gateway, and API</p> </li> <li> <p> Retention &amp; Compliance</p> <p>All retention-related keys and defaults</p> </li> </ul> <p>!!! tip 'Centralized management'     Configure production keys via the Admin Console or your secrets manager; do not store secrets in repo or plain text.</p> <p>!!! note 'Structure'     Use environment variables for runtime-only settings and persisted config for tunable platform behavior.</p> <p>!!! warning 'Config drift'     Ensure configuration is consistent across environments: mismatched retention or key settings may cause compliance gaps.</p>"},{"location":"configuration/#global-configuration-table-complete","title":"Global configuration table (complete)","text":"Key Service Purpose Example Required APP_ENV global Environment name production yes DATABASE_URL api/storage DB connection string postgresql://... yes STORAGE_BACKEND storage Storage backend type s3 yes STORAGE_KMS_KEY storage KMS key id arn:aws:kms:... yes RETENTION_YEARS storage Default PHI retention (years) 7 yes AUDIT_RETENTION_YEARS audit Audit retention 7 recommended BUS_BACKEND messaging Messaging backend type kafka yes GATEWAY_RATE_LIMIT gateway Per-client rate limit 100/min recommended GATEWAY_AUTH_TYPE gateway Auth mode (jwt/mTLS) jwt yes LOG_LEVEL global Logging verbosity INFO recommended UI_BUILD_ASSETS admin-ui Path to UI assets /var/www/admin_ui recommended"},{"location":"configuration/#examples-environment-snippets","title":"Examples: environment snippets","text":"PythonNode.jscurl <pre><code># (1)\n# Example: load configuration using pydantic BaseSettings\nfrom pydantic import BaseSettings\nclass Settings(BaseSettings):\n    app_env: str\n    database_url: str\n    class Config:\n        env_file = '.env'\n</code></pre> <pre><code>// (1)\n// Example: load config via process.env\nconst config = {\n  dbUrl: process.env.DATABASE_URL,\n  storageBackend: process.env.STORAGE_BACKEND || 's3'\n}\n</code></pre> <pre><code># (1)\nexport APP_ENV=development\nexport DATABASE_URL='sqlite+aiosqlite:///:memory:'\n</code></pre> <ol> <li>Prefer a secrets manager for production KMS and DB credentials</li> </ol> <pre><code>graph LR\n  Env[Environment Vars] --&gt; App\n  ConfigStore --&gt; App\n  App --&gt; Services\n  Services --&gt; Audit</code></pre>"},{"location":"configuration/#per-service-configuration-comparisons","title":"Per-service configuration comparisons","text":"Setting Canonical Storage Messaging Gateway retention schema versioning retention years retention days rate limits encryption N/A envelope AES-256 &amp; KMS message-level encryption TLS &amp; validation audit transform audits access &amp; change logs message audit request audit <p>!!! note 'Versioning &amp; migrations'     For config fields that are schema-related, use versioned keys and migration tooling. Avoid in-place changes without migrations.</p> <p>??? note 'Advanced: dynamic flags'     Some flags may be toggled at runtime via the Admin Console; use feature flags for experimental behavior.</p> <ol> <li> <p>Keep production configuration under strict access controls and ensure audit trails for changes.\u00a0\u21a9</p> </li> </ol>"},{"location":"getting-started-material/","title":"Getting Started with Vivified Platform","text":"<p>Welcome to the Vivified platform! This guide will help you get up and running with our HIPAA-compliant healthcare platform, designed with a plugin-based architecture and Docker-based deployment.</p>"},{"location":"getting-started-material/#quick-links","title":"Quick Links","text":"<ul> <li> Installation Guide   Learn how to set up Vivified on your system.</li> <li> SDKs   Explore our Python and Node.js SDKs.</li> <li> REST API   Dive into our API for robust integrations.</li> <li> Security   Understand our HIPAA-compliant architecture.</li> <li> Documentation   Access all platform resources.</li> </ul>"},{"location":"getting-started-material/#installation-guide","title":"Installation Guide","text":"<p>Note</p> <p>This section will guide you through the basic installation steps for the Vivified platform.</p>"},{"location":"getting-started-material/#prerequisites","title":"Prerequisites","text":"<ul> <li>Docker and Docker Compose</li> <li>Access to Vivified's private repository</li> </ul>"},{"location":"getting-started-material/#step-by-step-installation","title":"Step-by-Step Installation","text":"<ol> <li>Clone the Repository</li> </ol> <pre><code>git clone https://github.com/vivified/vivified-platform.git\ncd vivified-platform\n</code></pre> <ol> <li>Start Docker Services</li> </ol> <pre><code>docker-compose up -d\n</code></pre> <ol> <li>Verify Installation</li> </ol> <p>Access the platform at <code>http://localhost:8000</code>.</p> Advanced Configuration <p>For advanced configuration options, please refer to the Configuration Table below.</p>"},{"location":"getting-started-material/#sdks","title":"SDKs","text":"<p>Vivified provides SDKs for both Python and Node.js to facilitate easy integration.</p> PythonNode.jscurl <pre><code>from vivified_sdk import Client\n\nclient = Client(api_key=\"your_api_key\")\nresponse = client.get_patient_data(patient_id=\"12345\")\nprint(response)\n</code></pre> <pre><code>const { Client } = require('vivified-sdk');\n\nconst client = new Client('your_api_key');\nclient.getPatientData('12345').then(response =&gt; {\n  console.log(response);\n});\n</code></pre> <pre><code>curl -X GET \"https://api.vivified.com/patients/12345\" -H \"Authorization: Bearer your_api_key\"\n</code></pre> <p>Tip</p> <p>Make sure to replace <code>your_api_key</code> with your actual API key obtained from the Vivified dashboard.</p>"},{"location":"getting-started-material/#rest-api","title":"REST API","text":"<p>The Vivified REST API provides endpoints for managing healthcare data.</p>"},{"location":"getting-started-material/#authentication","title":"Authentication","text":"<p>All requests must include an <code>Authorization</code> header with a valid API key.</p> <pre><code>Authorization: Bearer your_api_key\n</code></pre>"},{"location":"getting-started-material/#configuration-table","title":"Configuration Table","text":"Parameter Description Default Value <code>API_PORT</code> Port for API server <code>8000</code> <code>DB_HOST</code> Database host address <code>localhost</code> <code>DB_PORT</code> Database port <code>5432</code> <code>LOG_LEVEL</code> Level of logging (info, debug) <code>info</code>"},{"location":"getting-started-material/#architecture","title":"Architecture","text":"<p>Below is a visual representation of Vivified's architecture.</p> <pre><code>graph TD;\n    A[User] --&gt;|requests| B[API Gateway];\n    B --&gt; C[Authentication Service];\n    B --&gt; D[Data Service];\n    D --&gt; E[Database];\n    C --&gt; F[HIPAA Compliance Layer];</code></pre> <p>Warning</p> <p>Ensure all components are properly configured to maintain HIPAA compliance.</p>"},{"location":"getting-started-material/#security","title":"Security","text":"<p>Vivified is designed with security at its core, ensuring all data handling complies with HIPAA regulations.</p> <p>Danger</p> <p>Unauthorized access to healthcare data is strictly prohibited and could lead to severe penalties.</p> Further Reading <p>For more details on our security measures, visit our Security Documentation.</p>"},{"location":"getting-started-material/#documentation","title":"Documentation","text":"<p>For more detailed information, visit the Vivified Documentation.</p> <p>With this guide, you should be well-equipped to start using the Vivified platform. If you encounter any issues, please reach out to our support team. Happy coding!</p>"},{"location":"getting-started/","title":"Getting Started","text":"<ul> <li> <p> Quick Start</p> <p>Get up and running with Vivified in minutes \u2014 Local CI, Admin Console, and Plugin onboarding</p> </li> <li> <p> Admin First</p> <p>All features accessible from the Admin Console; accessibility-first UI</p> </li> <li> <p>:material-automatic:{ .lg .middle } CI Parity</p> <p>Run exactly what CI runs locally to avoid surprise failures</p> </li> </ul> <p>!!! tip 'Best Practice'     Always run the Local CI Parity preflight before pushing. Use Python 3.11 and the pinned tool versions to match CI.</p> <p>!!! note 'Getting Started Overview'     This guide walks you through local preflight, Admin Console access, first plugin, and common developer checks. It's dyslexia-friendly with clear sections and visual cues.</p> <p>!!! warning 'Admin Console Mandate'     No CLI-only features: every capability must be available from the Admin Console.</p>"},{"location":"getting-started/#table-of-contents","title":"Table of contents","text":""},{"location":"getting-started/#local-ci-parity","title":"Local CI Parity","text":""},{"location":"getting-started/#admin-console-access","title":"Admin Console Access","text":""},{"location":"getting-started/#first-plugin-install-register","title":"First Plugin: Install &amp; Register","text":""},{"location":"getting-started/#quick-debugging-checklist","title":"Quick Debugging Checklist","text":""},{"location":"getting-started/#local-ci-parity_1","title":"Local CI Parity","text":"<p>!!! info 'Why this matters'     CI mirrors exact tool versions; mismatches lead to noisy CI failures. The preflight ensures parity.</p> <ul> <li> <p> Reproducible Environment</p> <p>Python 3.11 virtualenv + pinned deps</p> </li> <li> <p> Pre-commit Hooks</p> <p>pre-commit runs black, flake8, mypy, and pytest on push</p> </li> </ul>"},{"location":"getting-started/#run-the-preflight-local-ci-parity","title":"Run the preflight (local CI parity)","text":"PythonNode.jscurl <pre><code># (1)\n# Create and activate Python 3.11 venv, install exact deps\nimport subprocess\nsubprocess.run([\"python3.11\", \"-m\", \"venv\", \".venv\"])\n# (2)\n# Activate and install pinned packages\n# This is illustrative; use the bash variant below for exact commands\n</code></pre> <pre><code>// (1)\n// This is a placeholder: UI build uses npm ci &amp;&amp; npm run build in UI folders\n// (2) Use make ui-ci-local to run optional UI parity\nconsole.log('Run UI build in core/ui and core/admin_ui when node is present');\n</code></pre> <pre><code># (1) Exact preflight commands (run from repo root)\npython3.11 -m venv .venv &amp;&amp; . .venv/bin/activate\npip install -r core/requirements.txt \\\n  black==25.9.0 flake8==7.3.0 mypy==1.18.2 sqlalchemy==2.0.23 \\\n  pytest pytest-cov pytest-asyncio\n\n# (2) Lint/type/test\nblack --check core/ || (echo 'Run: black core/' &amp;&amp; exit 1)\nflake8 core/\nmypy --config-file mypy.ini core/\nPYTHONPATH=$PWD pytest -q\n</code></pre> <ol> <li>Create an environment exactly like CI</li> <li>Install pinned tools and run checks locally</li> </ol> <p>??? note 'Pre-commit setup'     To install recommended pre-commit hooks, run the block below in your repo root. This ensures consistent linting and testing on push.</p> PythonNode.jscurl <pre><code># (1)\n# Use pip to install pre-commit and write the YAML as shown\n</code></pre> <pre><code>// (1)\n// Node-based UI parity is optional but recommended. Add 'ui-ci-local' to Makefile.\n</code></pre> <pre><code>pip install pre-commit\ncat &gt; .pre-commit-config.yaml &lt;&lt;'YAML'\nrepos:\n  - repo: https://github.com/psf/black\n    rev: 25.9.0\n    hooks: [{ id: black }]\n  - repo: https://github.com/PyCQA/flake8\n    rev: 7.3.0\n    hooks: [{ id: flake8 }]\n  - repo: https://github.com/pre-commit/mirrors-mypy\n    rev: v1.18.2\n    hooks:\n      - id: mypy\n        additional_dependencies: [\"sqlalchemy==2.0.23\"]\n  - repo: local\n    hooks:\n      - id: pytest\n        name: pytest (pre-push)\n        entry: bash -c 'PYTHONPATH=$PWD pytest -q'\n        language: system\n        pass_filenames: false\n        stages: [push]\nYAML\npre-commit install -t pre-commit -t pre-push\n</code></pre>"},{"location":"getting-started/#admin-console-access_1","title":"Admin Console Access","text":"<p>!!! tip 'Accessibility'     Admin Console is the primary UI. Ensure keyboard accessibility and dyslexia-friendly settings are enabled in your browser and in the Admin UI.</p> Area Description Access Dashboard System health, metrics, quick actions Admin role Plugins Marketplace, register/unregister plugins Admin role Settings Global config &amp; environment variables Admin role"},{"location":"getting-started/#keyboard-shortcuts-examples","title":"Keyboard shortcuts (examples)","text":"<ul> <li>Ctrl+K to open command palette</li> <li>Ctrl+S to save changes in forms</li> </ul> <p>??? note 'UI Build'     If your push includes UI code, the CI will run a separate Docker UI build job. Ensure local builds pass with ++make ui-ci-local++ when possible.</p>"},{"location":"getting-started/#first-plugin-install-register_1","title":"First Plugin: Install &amp; Register","text":"<p>!!! info 'Plugin model'     Plugins are first-class: they expose roles, Admin UI components, and configuration. Use the Plugin Marketplace in the Admin Console to register a new plugin.</p> <ul> <li> <p> Plugin Extensibility</p> <p>Plugins can provide canonical adapters, event handlers, and UI widgets</p> </li> <li> <p> Marketplace</p> <p>Install or register plugins via the Admin Console or API</p> </li> </ul>"},{"location":"getting-started/#quick-register-via-admin-api","title":"Quick register via Admin API","text":"PythonNode.jscurl <pre><code># (1)\nimport requests\nresp = requests.post('https://admin.example/api/plugins', json={'name': 'my-plugin'})\n# (2)\nprint(resp.status_code)\n</code></pre> <pre><code>// (1)\nconst fetch = require('node-fetch')\n// (2)\nfetch('https://admin.example/api/plugins', { method: 'POST', body: JSON.stringify({ name: 'my-plugin' }) })\n</code></pre> <pre><code># (1)\ncurl -X POST https://admin.example/api/plugins -H 'Content-Type: application/json' -d '{\"name\":\"my-plugin\"}'\n</code></pre> <ol> <li>Use the Admin API to register plugins programmatically</li> <li>Prefer the Admin Console for guided workflows and verification</li> </ol>"},{"location":"getting-started/#quick-debugging-checklist_1","title":"Quick Debugging Checklist","text":"<ul> <li> Run ++make ci-local++ or preflight commands</li> <li> Build Admin UI locally (++make ui-ci-local++) when changing UI</li> <li> Ensure branch protection checks are green before merge</li> </ul> <pre><code>graph LR\n  Dev[Developer] --&gt;|run preflight| LocalCI[Local CI Parity]\n  LocalCI --&gt;|passes| GitHub[Push to repo]\n  GitHub --&gt; CI[CI Pipeline]\n  CI --&gt;|green| Merge[Merge to integration]</code></pre> <p>!!! danger 'Merge protection'     Do not merge if local parity fails. Agents and automation rely on green main/integration branches.</p> <p>??? note 'Advanced'     For agent gating and advanced automation (poll PR merge or wait-merge), see the Admin API and tools/scripts in the repo.</p> <ol> <li> <p>Local CI parity is required to prevent CI-only failures.\u00a0\u21a9</p> </li> </ol>"},{"location":"security/","title":"Security","text":"<ul> <li> <p> Security &amp; Compliance</p> <p>HIPAA-aligned controls: encryption, audit, RBAC, retention</p> </li> <li> <p> Zero Trust</p> <p>Per-service auth, token scopes, and mTLS options</p> </li> <li> <p> Audit &amp; Evidence</p> <p>Logs and retention policies for compliance evidence</p> </li> </ul> <p>!!! tip 'Least privilege'     Grant minimal roles to service accounts and human users. Prefer short-lived tokens and role-scoped credentials.</p> <p>!!! note 'Encryption standards'     - At rest: AES-256 (envelope encryption)     - In transit: TLS 1.2+ with strong ciphers</p> <p>!!! danger 'PHI exposure'     Never write PHI to public or debug logs. Use structured logging with explicit masked fields.</p>"},{"location":"security/#security-controls","title":"Security controls","text":"Control Description Status HIPAA Encryption (rest) AES-256 envelope \u2705 Compliant Encryption (transit) TLS 1.2+ \u2705 Compliant RBAC Role-based access control \u2705 Compliant Audit logs 7-year retention \u2705 Compliant <pre><code>graph LR\n  User --&gt; Auth[Auth Service]\n  Auth --&gt;|issue token| API\n  API --&gt; PolicyEngine\n  PolicyEngine --&gt; Storage\n  Storage --&gt; KMS\n  KMS --&gt;|wrap| Keys</code></pre>"},{"location":"security/#key-practices","title":"Key practices","text":"<ul> <li>Rotate KMS keys regularly</li> <li>Use centralized secrets management for service tokens</li> <li>Encrypt backups and restrict access</li> </ul>"},{"location":"security/#incident-response-checklist","title":"Incident response checklist","text":"<ul> <li> Revoke compromised tokens</li> <li> Rotate keys where feasible</li> <li> Preserve and secure audit logs</li> <li> Notify compliance officer if PHI implicated</li> </ul>"},{"location":"security/#policy-configuration-table","title":"Policy &amp; configuration table","text":"Policy Purpose Required Notes DATA_RETENTION_YEARS How long PHI is stored 7 Regulatory baseline AUDIT_RETENTION_YEARS How long audit logs are kept 7 Evidence for compliance ACCESS_APPROVAL Manual approval for plugin PHI access yes For production <p>!!! warning 'Audit integrity'     Ensure timestamps and actor identity cannot be tampered with. Use signed audit entries and append-only stores.</p> <p>??? note 'Third-party integrations'     Vet third-party services for HIPAA Business Associate Agreement (BAA) before sending PHI.</p> <ol> <li> <p>Security policies are enforced across gateway, API, storage, and messaging layers.\u00a0\u21a9</p> </li> </ol>"},{"location":"troubleshooting/","title":"Troubleshooting","text":"<ul> <li> <p> Troubleshooting</p> <p>Quick resolutions for common developer and operator issues</p> </li> <li> <p>:material-bug-report:{ .lg .middle } Common Pitfalls</p> <p>Mypy, flake8, black, and SQLAlchemy typer pitfalls</p> </li> <li> <p> Debugging Playbook</p> <p>Step-by-step checks for CI parity and UI issues</p> </li> </ul> <p>!!! tip 'Start local parity'     When CI fails, always run the Local CI Parity preflight from getting-started before filing issues.</p> <p>!!! note 'Common errors'     The most frequent root causes are typing mistakes, mutable defaults, and import-time side effects.</p> <p>!!! warning 'UI missing files'     If the Admin UI references components not committed, tsc --noEmit will typically catch missing imports; add UI coverage to pre-push hooks.</p>"},{"location":"troubleshooting/#quick-fixes-table","title":"Quick fixes table","text":"Symptom Likely cause Quick fix mypy errors about Optional Missing explicit Optional[T] Use T Tests failing intermittently Async session misuse Use async_sessionmaker and async with Black/flake8 failures Formatting/lint issues Run black core/ and flake8 core/"},{"location":"troubleshooting/#debugging-workflow","title":"Debugging workflow","text":"<pre><code>graph TD\n  Developer --&gt; LocalPreflight\n  LocalPreflight --&gt;|passes| Push\n  Push --&gt;|CI fails| CILogs\n  CILogs --&gt; Developer\n  Developer --&gt; Fix\n  Fix --&gt; LocalPreflight</code></pre>"},{"location":"troubleshooting/#example-run-the-full-local-parity","title":"Example: run the full local parity","text":"PythonNode.jscurl <pre><code># (1)\n# Run all checks programmatically (simple wrapper)\nimport subprocess\nsubprocess.run(['bash', '-c', 'python3.11 -m venv .venv &amp;&amp; . .venv/bin/activate &amp;&amp; pip install -r core/requirements.txt'])\n</code></pre> <pre><code>// (1)\n// Trigger UI build for local parity\n// (cd core/admin_ui &amp;&amp; npm ci &amp;&amp; npm run build)\n</code></pre> <pre><code># (1)\npython3.11 -m venv .venv &amp;&amp; . .venv/bin/activate\npip install -r core/requirements.txt \\\n  black==25.9.0 flake8==7.3.0 mypy==1.18.2 sqlalchemy==2.0.23 \\\n  pytest pytest-cov pytest-asyncio\nblack --check core/ || (echo 'Run: black core/' &amp;&amp; exit 1)\nflake8 core/\nmypy --config-file mypy.ini core/\nPYTHONPATH=$PWD pytest -q\n</code></pre> <ol> <li>Run exact tool versions locally</li> </ol>"},{"location":"troubleshooting/#error-catalogue-and-remedies","title":"Error catalogue and remedies","text":"Error Explanation Remedy Type error implicit Optional Parameter default None not annotated Annotate as T Mutable default list Using = [] in dataclass Use field(default_factory=list) Import side effects DB/network calls at import Lazy-init or fixtures in tests <p>!!! note 'Async tests'     Remember to install pytest-asyncio and mark async tests with ++@pytest.mark.asyncio++.</p> <p>??? note 'When to escalate'     If you see infrastructure-level failures (KMS, DB), collect logs, audit entries, and environment details before contacting platform SRE.</p> <ol> <li> <p>Keeping local parity in sync with CI prevents the majority of failed pushes.\u00a0\u21a9</p> </li> </ol>"},{"location":"_autopilot/plan/","title":"Docs Autopilot Plan","text":"<p>Generated: 2025-09-28T20:42:53.683590</p>"},{"location":"_autopilot/plan/#changes-detected","title":"Changes detected","text":"<ul> <li>core: 2 file(s)</li> <li>other: 2 file(s)</li> </ul>"},{"location":"_autopilot/plan/#suggested-documentation-updates","title":"Suggested documentation updates","text":"<ul> <li>Update Core overview and API references if endpoints or models changed.</li> <li>Consider adding release notes or changelog entries.</li> </ul>"},{"location":"core/","title":"Index","text":"<ul> <li> <p> Core Services</p> <p>Canonical, Storage, Messaging, API, Gateway \u2014 secure, modular services</p> </li> <li> <p> Service Catalog</p> <p>Service contract and integrations for plugins and Admin API</p> </li> <li> <p> Compliance Built-in</p> <p>Encryption, audit logs, retention policies aligned to HIPAA</p> </li> </ul> <p>!!! tip 'Readability'     Each core service is documented separately (canonical, storage, messaging, gateway). Use this index as the quick map.</p> <p>!!! note 'User-facing focus'     The docs below describe how to operate, configure, and integrate with core services \u2014 not internal roadmap.</p> <p>!!! warning 'Audit trails'     All PHI/PII-affecting operations are audit-logged. Ensure your integration preserves audit context.</p>"},{"location":"core/#core-services-overview","title":"Core Services Overview","text":"Service Primary Function Status HIPAA canonical Data normalization &amp; transformation \u2705 Active Compliant storage Encrypted PHI/PII storage \u2705 Active Compliant messaging Event bus &amp; inter-plugin comms \u2705 Active Compliant api Admin API (role-based) \u2705 Active Compliant gateway External proxy &amp; validation \u2705 Active Compliant"},{"location":"core/#architecture","title":"Architecture","text":"<pre><code>graph LR\n  User[Admin UI / Client] --&gt;|HTTPS| Gateway\n  Gateway --&gt; API[Admin API]\n  API --&gt; Canonical\n  API --&gt; Storage\n  API --&gt; Messaging\n  Messaging --&gt;|events| Plugins\n  Storage --&gt;|encrypted| Database[(Encrypted DB)]</code></pre> <p>??? note 'Service contracts'     Each core service exposes stable REST/gRPC or async interfaces documented in the service subpages.</p>"},{"location":"core/#links","title":"Links","text":"<ul> <li>core/canonical.md \u2014 Canonical data models and normalization</li> <li>core/storage.md \u2014 Encrypted storage and retention</li> <li>core/messaging.md \u2014 Event bus and message flows</li> <li>core/gateway.md \u2014 External API gateway and filtering</li> </ul> <ol> <li> <p>Core services are the user-facing integration points for plugins and admin operations.\u00a0\u21a9</p> </li> </ol>"},{"location":"core/canonical/","title":"Canonical","text":"<ul> <li> <p> Canonical Service</p> <p>Data normalization, PHI/PII transformations, audit logging</p> </li> <li> <p> Cross-plugin Compatibility</p> <p>Canonical schemas ensure plugins interoperate reliably</p> </li> <li> <p>:material-audit:{ .lg .middle } Audit-First</p> <p>All transformations are recorded with context for compliance</p> </li> </ul> <p>!!! tip 'Use canonical types'     When writing plugins, accept and emit canonical models so downstream services can process without custom mappings.</p> <p>!!! note 'CanonicalUser &amp; CanonicalMessage'     Canonical models (examples) are the recommended interchange format across plugins.</p> <p>!!! warning 'PII handling'     Avoid exposing raw PHI in logs. Use canonical transformations to mask or tokenize sensitive fields.</p>"},{"location":"core/canonical/#canonicaluser-model-excerpt","title":"CanonicalUser model (excerpt)","text":"<pre><code>from pydantic import BaseModel, Field\nfrom typing import List, Dict\nfrom datetime import datetime\n\nclass CanonicalUser(BaseModel):\n    id: str\n    username: str\n    email: str\n    roles: List[str] = Field(default_factory=list)\n    traits: List[str] = Field(default_factory=list)\n    created_at: datetime\n    attributes: Dict[str, str] = Field(default_factory=dict)\n\n    class Config:\n        use_enum_values = True\n</code></pre> <ol> <li>The model preserves roles and traits</li> <li>Default factories avoid mutable default pitfalls</li> <li>Use Pydantic for validation and JSON encoding</li> </ol>"},{"location":"core/canonical/#canonicalmessage-model-excerpt","title":"CanonicalMessage model (excerpt)","text":"<pre><code>from pydantic import BaseModel, Field\nfrom datetime import datetime\nfrom uuid import uuid4\nfrom typing import List, Dict, Any\n\nclass CanonicalMessage(BaseModel):\n    id: str = Field(default_factory=lambda: str(uuid4()))\n    from_user: str\n    to_user: str\n    content_type: str = \"text/plain\"\n    content: bytes\n    data_traits: List[str] = Field(default_factory=list)\n    sent_at: datetime = Field(default_factory=datetime.utcnow)\n    metadata: Dict[str, Any] = Field(default_factory=dict)\n</code></pre> PythonNode.jscurl <pre><code># (1)\n# Example: normalize an incoming user dict to CanonicalUser\ndef to_canonical_user(raw: dict) -&gt; CanonicalUser:\n    return CanonicalUser(\n        id=raw.get('id'),\n        username=raw['username'],\n        email=raw.get('email',''),\n        created_at=raw.get('created_at')\n    )\n</code></pre> <pre><code>// (1)\n// Example: perform a lightweight mapping in JS before sending to API\nfunction toCanonicalUser(raw) {\n  return {\n    id: raw.id,\n    username: raw.username,\n    email: raw.email || '',\n    roles: raw.roles || []\n  }\n}\n</code></pre> <pre><code># (1)\ncurl -X POST https://admin.example/api/canonical/users -H 'Content-Type: application/json' -d '{\"username\":\"alice\"}'\n</code></pre> <ol> <li>Transform raw inputs into canonical types before persisting or emitting</li> </ol>"},{"location":"core/canonical/#configuration-options-canonical","title":"Configuration options (canonical)","text":"Option Description Default Enforced normalization.mode Mode of normalization (strict/lenient) strict Recommended audit.enabled Record transform audit logs true Required pii.masking Mask strategy for PHI fields tokenization Required <pre><code>sequenceDiagram\n  participant API\n  participant Canonical\n  participant Storage\n  API-&gt;&gt;Canonical: submit raw data\n  Canonical-&gt;&gt;Canonical: validate &amp; normalize\n  Canonical-&gt;&gt;Storage: store canonical record (masked)\n  Canonical-&gt;&gt;API: return canonical id</code></pre> <p>!!! danger 'Data loss risk'     Changing canonical schemas is backwards-incompatible. Use versioned schemas and migration tooling.</p> <p>??? note 'Advanced: Traits and Metadata'     Traits are lightweight tags used for routing and filtering in messaging and storage. See the messaging docs for trait-based routing examples.</p> <ol> <li> <p>Canonical schemas are the contract between plugins and core services.\u00a0\u21a9</p> </li> </ol>"},{"location":"core/gateway/","title":"Gateway","text":"<ul> <li> <p>:material-gateway:{ .lg .middle } External Gateway</p> <p>API proxy with validation, rate-limiting, and domain allowlists</p> </li> <li> <p> Policy Enforcement</p> <p>Request/response transformation and security validation for incoming traffic</p> </li> <li> <p> Monitoring</p> <p>Rate limits, metrics, and per-client quotas</p> </li> </ul> <p>!!! tip 'Whitelist domains'     Use domain allowlists for upstream proxies and strict validation for inbound requests.</p> <p>!!! note 'Transformation'     The gateway can mutate requests/responses to canonical formats or mask PHI for certain clients.</p> <p>!!! warning 'DoS protection'     Configure rate-limits to prevent abusive clients from overwhelming core services.</p>"},{"location":"core/gateway/#gateway-responsibilities","title":"Gateway responsibilities","text":"Responsibility Description Default Proxying Forward external API calls to Admin API enabled Validation Schema + security checks enabled Rate limiting Per-client quotas and global caps configurable Filtering Blocklist/allowlist domains &amp; paths configurable <pre><code>graph LR\n  Client --&gt;|HTTPS| Gateway\n  Gateway --&gt; PolicyEngine\n  PolicyEngine --&gt; AuthService\n  Gateway --&gt; AdminAPI\n  Gateway --&gt; Metrics</code></pre>"},{"location":"core/gateway/#example-proxying-validation","title":"Example: proxying &amp; validation","text":"PythonNode.jscurl <pre><code># (1)\ndef proxy_request(req):\n    # validate headers and body\n    if not valid(req):\n        raise ValueError('Invalid request')\n    transformed = transform_to_canonical(req.json())\n    return forward_to_api(transformed)\n</code></pre> <pre><code>// (1)\napp.post('/proxy', validateMiddleware, async (req, res) =&gt; {\n  const payload = transformToCanonical(req.body)\n  const r = await fetch('https://admin.example/api', { method: 'POST', body: JSON.stringify(payload) })\n  res.status(r.status).send(await r.text())\n})\n</code></pre> <pre><code># (1)\ncurl -X POST https://gateway.example/proxy -H 'Authorization: Bearer &lt;token&gt;' -d '{\"username\":\"alice\"}'\n</code></pre> <ol> <li>Validate early, transform, and forward to Admin API; keep gateways stateless where possible</li> </ol>"},{"location":"core/gateway/#configuration-gateway","title":"Configuration (gateway)","text":"Key Purpose Example Required GATEWAY_RATE_LIMIT Rate limit per client 100/min yes GATEWAY_ALLOWLIST Allowed upstream domains api.example.com recommended GATEWAY_AUTH_TYPE Auth mechanism (jwt/mTLS) jwt yes <p>!!! danger 'Exposing PHI'     Do not log full request/response bodies that may contain PHI. Use truncation or structured masks in logs.</p> <p>??? note 'Advanced: policy engine'     The gateway integrates with a policy engine to apply RBAC and attribute-based rules before forwarding.</p> <ol> <li> <p>Gateway configuration should be centrally managed and deployed consistently across environments.\u00a0\u21a9</p> </li> </ol>"},{"location":"core/messaging/","title":"Messaging","text":"<ul> <li> <p> Messaging (Event Bus)</p> <p>HIPAA-aware event bus for inter-plugin communication with routing and filtering</p> </li> <li> <p> Routing &amp; Filtering</p> <p>Trait-based routing and message-level policy enforcement</p> </li> <li> <p> Audit &amp; Replay</p> <p>Immutable event logs with replay capabilities for recovery and audit</p> </li> </ul> <p>!!! tip 'Design for idempotency'     Handlers must be idempotent: messages may be retried and delivered more than once.</p> <p>!!! note 'PHI protection'     The messaging layer enforces encryption and masking of PHI fields before delivery to non-authorized listeners.</p> <p>!!! warning 'Message size'     Large payloads should be stored in storage and a pointer delivered in the message to avoid exceeding bus limits.</p>"},{"location":"core/messaging/#core-features","title":"Core features","text":"Feature Description Status HIPAA Routing Trait-based routing \u2705 Active Compliant Encryption Message-level encryption \u2705 Active Compliant Audit Full message audit trail \u2705 Active Compliant Filtering Policy-based filtering \u2705 Active Compliant"},{"location":"core/messaging/#message-flow","title":"Message flow","text":"<pre><code>sequenceDiagram\n  participant PluginA\n  participant Bus\n  participant PluginB\n  PluginA-&gt;&gt;Bus: publish(CanonicalMessage)\n  Bus-&gt;&gt;Bus: classify &amp; filter\n  Bus-&gt;&gt;PluginB: deliver(masked message)\n  Bus-&gt;&gt;Audit: record event</code></pre>"},{"location":"core/messaging/#example-publish-a-canonical-message","title":"Example: publish a canonical message","text":"PythonNode.jscurl <pre><code># (1)\nasync def publish_message(bus_client, msg: CanonicalMessage):\n    await bus_client.publish('messages', msg.dict())\n</code></pre> <pre><code>// (1)\nawait busClient.publish('messages', canonicalMessage)\n</code></pre> <pre><code># (1)\ncurl -X POST https://admin.example/api/messaging/publish -H 'Content-Type: application/json' -d '{\"to_user\":\"bob\"}'\n</code></pre> <ol> <li>Use the messaging client to publish; the bus enforces classification and audit</li> </ol>"},{"location":"core/messaging/#configuration-messaging","title":"Configuration (messaging)","text":"Option Purpose Default Required BUS_BACKEND Messaging backend (kafka/rabbit) kafka yes ENCRYPTION Enable message encryption true yes RETENTION_DAYS Message retention on bus 30 recommended <p>!!! note 'Replay and recovery'     The bus stores immutable events and supports replay to rebuild derived state. Use replay carefully with rate-limiting.</p> <p>??? note 'Advanced routing'     Traits are referenced in canonical messages to enable fine-grained routing rules. See policy engine docs in gateway for examples.</p> <ol> <li> <p>Messaging events are audited; use tokens and roles to control who can subscribe to PHI-bearing topics.\u00a0\u21a9</p> </li> </ol>"},{"location":"core/overview/","title":"Overview","text":"<ul> <li> <p> Core Services</p> <p>Canonical, Storage, Messaging, Gateway \u2014 secure and modular</p> </li> <li> <p> Modular Design</p> <p>Plugin-first architecture with well-defined contracts</p> </li> <li> <p>:material-insights:{ .lg .middle } Observability</p> <p>Audit logs, metrics, and health endpoints across services</p> </li> </ul> <p>Admin-First Design</p> <p>All core service operations must be available through the Admin Console. No CLI-only controls.</p> <p>PHI/PII Handling</p> <p>Core services are built to minimize PHI exposure. Use classification and redaction in storage and messages.</p> <p>Network Exposure</p> <p>Do not expose internal core endpoints directly to the public internet. Use the Gateway for external access.</p>"},{"location":"core/overview/#services-at-a-glance","title":"Services at a Glance","text":"Service Purpose Exposed Interfaces HIPAA canonical Normalize and transform data gRPC/REST, plugins Compliant storage Encrypted PHI/PII storage REST API, SDK Compliant messaging Inter-plugin event bus Pub/Sub API Compliant gateway External proxy &amp; filtering HTTP(S) ingress Compliant <ul> <li> <p> Stable SDKs</p> <p>Python and Node.js SDKs for service access</p> </li> <li> <p> Audit &amp; Retention</p> <p>7-year retention for audit logs, tamper-proof append-only store</p> </li> </ul>"},{"location":"core/overview/#high-level-architecture","title":"High-level Architecture","text":"<pre><code>flowchart LR\n  AdminUI[Admin Console] --&gt;|Admin API| API[Admin API Gateway]\n  API --&gt; Canonical[Canonical Service]\n  API --&gt; Storage[Storage Service]\n  API --&gt; Messaging[Messaging Service]\n  Gateway[External Gateway] --&gt;|Proxied Requests| API\n  Storage --&gt;|Encrypted| Vault[(Key Vault)]</code></pre>"},{"location":"core/overview/#getting-service-status","title":"Getting Service Status","text":"PythonNode.jscurl <pre><code># (1) Simple health check against Admin API\nimport requests\nr = requests.get('https://localhost:8443/health')\nprint(r.json())\n</code></pre> <pre><code>// (1) Node health check\nconst fetch = require('node-fetch')\nfetch('https://localhost:8443/health').then(r =&gt; r.json()).then(console.log)\n</code></pre> <pre><code># (1) Use curl to check overall platform health\ncurl -sS https://localhost:8443/health | jq\n</code></pre> <ol> <li>Requests the unified health endpoint which aggregates service health</li> </ol>"},{"location":"core/overview/#service-contracts-short","title":"Service Contracts (short)","text":"<ul> <li>Canonical: accepts plugin-specific payloads, returns normalized canonical model</li> <li>Storage: uses AES-256 at rest, per-tenant keying supported</li> <li>Messaging: event bus supports routing, filters, and PII-safe payloads</li> <li>Gateway: domain allowlists, request/response transformations</li> </ul>"},{"location":"core/overview/#glossary","title":"Glossary","text":"CanonicalUser Standard user model across plugins Audit Log Immutable, append-only record of data and operational events"},{"location":"core/overview/#operational-checklist","title":"Operational Checklist","text":"<ul> <li> Ensure audit.retention_years &gt;= 7</li> <li> Verify encryption keys stored in Key Vault</li> <li> Regularly rotate keys and review RBAC</li> </ul> Debugging Tips <p>Use Ctrl+Shift+I to open browser devtools for Admin UI troubleshooting. Check network requests to /api/* endpoints.</p>"},{"location":"core/storage/","title":"Storage","text":"<ul> <li> <p> Encrypted Storage</p> <p>HIPAA-compliant storage abstraction with automatic classification and retention</p> </li> <li> <p> Encryption &amp; Keys</p> <p>AES-256 at rest, envelope encryption, and key rotation support</p> </li> <li> <p> Retention &amp; Audit</p> <p>Policy-driven retention with 7-year audit retention</p> </li> </ul> <p>!!! tip 'Encryption'     All PHI/PII must be encrypted at rest and in transit. Use the storage abstraction rather than writing raw blobs to your own tables.</p> <p>!!! note 'Automatic Classification'     The storage layer classifies data on ingest and applies appropriate retention/labeling.</p> <p>!!! warning 'Key management'     Rotate keys regularly and ensure that rotated keys are stored in a secure KM provider. Losing keys can cause irreversible data loss.</p>"},{"location":"core/storage/#storage-capabilities","title":"Storage Capabilities","text":"Feature Description Status HIPAA Encryption AES-256 envelope encryption \u2705 Active Compliant Classification Automatic PHI/PII labeling \u2705 Active Compliant Retention Policy-driven retention (years) \u2705 Active Compliant Audit Logs 7-year retention for auditable changes \u2705 Active Compliant"},{"location":"core/storage/#example-storing-a-canonical-user","title":"Example: storing a canonical user","text":"PythonNode.jscurl <pre><code># (1)\n# Use the storage client to store a canonical record with classification\nasync def store_user(storage_client, canonical_user):\n    await storage_client.put('users', canonical_user.id, canonical_user.dict())\n</code></pre> <pre><code>// (1)\n// Node example: store a user via the storage client\nawait storageClient.put('users', canonicalUser.id, canonicalUser)\n</code></pre> <pre><code># (1)\ncurl -X PUT https://admin.example/api/storage/users/alice -H 'Content-Type: application/json' -d '{\"id\":\"alice\"}'\n</code></pre> <ol> <li>Always use storage client to centralize encryption and classification</li> </ol> <pre><code>graph LR\n  App --&gt; StorageAPI\n  StorageAPI --&gt;|classify| Classifier\n  StorageAPI --&gt;|encrypt| KMS[KMS]\n  StorageAPI --&gt; DB[(Encrypted DB)]\n  StorageAPI --&gt; Audit[Audit Logs]</code></pre>"},{"location":"core/storage/#configuration-table-storage","title":"Configuration table (storage)","text":"Key Purpose Example Required STORAGE_BACKEND Storage backend type s3 yes STORAGE_KMS_KEY KMS key identifier arn:aws:kms:... yes RETENTION_YEARS Data retention policy (years) 7 yes AUDIT_RETENTION_YEARS Audit retention 7 recommended <p>!!! danger 'Irrecoverable loss'     If you delete or rotate KMS keys without backup or key escrow, data encrypted with the old key may be unrecoverable.</p> <p>??? note 'Access patterns'     For large attachments, the storage client supports streaming uploads and signed URLs to avoid loading big objects into memory.</p> <ol> <li> <p>Storage settings must be centrally managed via Admin Console and auditable.\u00a0\u21a9</p> </li> </ol>"},{"location":"plugins/development/","title":"Development","text":"<ul> <li> <p> Plugin Development</p> <p>How to build, register, and test plugins for Vivified</p> </li> <li> <p>:material-extension:{ .lg .middle } Plugin API</p> <p>Plugin lifecycle, registration, and capabilities</p> </li> <li> <p> Marketplace Ready</p> <p>Packaging and publishing guidelines for the Admin Console marketplace</p> </li> </ul> <p>!!! tip 'Start with canonical models'     Use canonical types when designing plugin inputs/outputs to ensure compatibility with other plugins and core services.</p> <p>!!! note 'Admin Console integration'     Every plugin must expose administrative UI components when applicable; no CLI-only features.</p> <p>!!! warning 'Security review required'     Plugins that access PHI require additional security review and must declare required roles and capabilities.</p>"},{"location":"plugins/development/#plugin-anatomy","title":"Plugin anatomy","text":"<ul> <li>manifest.yaml \u2014 metadata and capabilities</li> <li>server/ \u2014 plugin runtime (Python/Node)</li> <li>ui/ \u2014 optional Admin UI components</li> <li>tests/ \u2014 unit and integration tests</li> </ul>"},{"location":"plugins/development/#manifest-example-conceptual","title":"Manifest example (conceptual)","text":"Field Purpose Example Required name Plugin name my-plugin yes version Semver 1.0.0 yes capabilities Roles and hooks canonical-adapter recommended ui Admin UI entry points /admin/plugins/my-plugin recommended"},{"location":"plugins/development/#lifecycle","title":"Lifecycle","text":"<pre><code>sequenceDiagram\n  participant Admin\n  participant Plugin\n  participant Core\n  Admin-&gt;&gt;Core: register(plugin manifest)\n  Core-&gt;&gt;Plugin: initialize\n  Plugin-&gt;&gt;Core: register handlers\n  Core-&gt;&gt;Admin: plugin registered</code></pre>"},{"location":"plugins/development/#example-plugin-registration-via-api","title":"Example: plugin registration via API","text":"PythonNode.jscurl <pre><code># (1)\nimport requests\nresp = requests.post('https://admin.example/api/plugins', json={'name': 'my-plugin', 'version':'1.0.0'})\nprint(resp.json())\n</code></pre> <pre><code>// (1)\nconst fetch = require('node-fetch')\nawait fetch('https://admin.example/api/plugins', { method: 'POST', body: JSON.stringify({ name: 'my-plugin', version: '1.0.0' }) })\n</code></pre> <pre><code># (1)\ncurl -X POST https://admin.example/api/plugins -H 'Content-Type: application/json' -d '{\"name\":\"my-plugin\",\"version\":\"1.0.0\"}'\n</code></pre> <ol> <li>Register a plugin manifest with the Admin API; plugin will be initialized and provided with secrets</li> </ol>"},{"location":"plugins/development/#development-checklist","title":"Development checklist","text":"<ul> <li> Implement canonical adapters if exchanging user/message data</li> <li> Provide Admin UI components for configuration</li> <li> Add unit and async tests (++pytest++ for Python)</li> <li> Submit security review for PHI access</li> </ul> <p>??? note 'Testing'     Use in-memory SQLite for tests and avoid network/DB calls at import time. Mark async tests with ++@pytest.mark.asyncio++.</p>"},{"location":"plugins/development/#packaging-marketplace","title":"Packaging &amp; Marketplace","text":"Item Description Required manifest.yaml Plugin metadata yes signed package Optional for marketplace recommended UI bundle Admin UI assets (if present) recommended <p>!!! danger 'Unsigned plugins'     Do not install unsigned plugins in production without an explicit security review.</p> <ol> <li> <p>Plugins must adhere to Admin Console accessibility and provide keyboard-navigable UI components.\u00a0\u21a9</p> </li> </ol>"}]}